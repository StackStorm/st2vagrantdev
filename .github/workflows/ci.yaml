name: CI

on:
  push:
    branches:
      - master
  pull_request:
    type: [opened, reopened, edited]
    branches:
      - master
  schedule:
    - cron:  '0 0 * * *'

jobs:
  # Special job which automatically cancels old runs for the same branch, prevents runs for the
  # same file set which has already passed, etc.
  pre_job:
    name: Skip Duplicate Jobs Pre Job
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@4c656bbdb6906310fa6213604828008bc28fe55d # v3.3.0
        with:
          cancel_others: 'true'
          github_token: ${{ github.token }}

  ansible-lint:
    needs: pre_job
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Python 3.6'
            python_version: "3.6"

    steps:
      - uses: actions/checkout@v2

      - name: 'Set up Python (${{ matrix.python-version }})'
        uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python-version }}'

      - name: Cache Python Dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-v2-python-${{ matrix.python-version }}-${{ hashFiles('lint-requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-v2-python-${{ matrix.python }}-

      - name: Install Python Dependencies
        run: |
          pip install -r lint-requirements.txt

      - name: Run Ansible Lint
        run: |
          ansible-lint -p ansible/

  vagrant-up:
    needs: pre_job
    # Need to run it on OSX since nested virtualization is not supported on Linux runners
    runs-on: macos-10.15
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Python 3.6 + MongoDB 4.0'
            python_version: "3.6"
            mongodb_version: "4.0"
          - name: 'Python 3.8 + MongoDB 4.4'
            python_version: "3.8"
            mongodb_version: "4.4"

    steps:
      - uses: actions/checkout@v2

      - name: Cache Vagrant boxes
        uses: actions/cache@v2
        with:
          path: ~/.vagrant.d/boxes
          key: ${{ runner.os }}-vagrant-ubuntu-bionic64
          restore-keys: |
            ${{ runner.os }}-vagrant-

      - name: Clone StackStorm/st2 repo
        run: |
          git clone https://github.com/StackStorm/st2.git /tmp/st2

      - name: Run vagrant up
        #env:
        #  ANSIBLE_DEBUG: "true"
        run: |
          sed -i".bak" -E -e "s#../st2#/tmp/st2#g" Vagrantfile
          sed -i".bak" -E -e "s#3.6#${{ matrix.python_version }}#g" Vagrantfile
          sed -i".bak" -E -e "s#4.0#${{ matrix.mongodb_version }}#g" Vagrantfile
          cat Vagrantfile

          vagrant up

      # NOTE: vagrant ssh -c exists with the same exit code as command which is ran in the VM
      - name: Verify Software Versions And Running Processes
        run: |
          vagrant ssh -c "ls -la /home/vagrant"
          vagrant ssh -c "cat /home/vagrant/.bash_profile"
          vagrant ssh -c "cat /home/vagrant/.st2_python_binary"
          vagrant ssh -c "$(cat /home/vagrant/.st2_python_binary) --version --version ; dpkg -l | grep mongodb-org ; dpkg -l | grep redis-server ; dpkg -l | grep erlang-base ; dpkg -l | grep rabbitmq-server"
          vagrant ssh -c "$(cat /home/vagrant/.st2_python_binary) --version --version | grep ${{ matrix.python_version }}"
          vagrant ssh -c "dpkg -l | grep mongodb-org | grep ${{ matrix.mongodb_version }}"
          vagrant ssh -c "dpkg -l | grep erlang-base | grep 23.3"
          vagrant ssh -c "dpkg -l | grep rabbitmq-server | grep 3.8"
          vagrant ssh -c "ps aux | grep mongodb | grep -v grep"
          vagrant ssh -c "ps aux | grep rabbitmq | grep -v grep"
          vagrant ssh -c "ps aux | grep redis-server | grep -v grep"
          vagrant ssh -c "sudo ls -la /home/stanley/.ssh"
          vagrant ssh -c "sudo ls -la /home/vagrant/.ssh"
          vagrant ssh -c "sudo ls -la /home/stanley/.ssh/authorized_keys"
          vagrant ssh -c "sudo ls -la /home/vagrant/.ssh/stanley_rsa"
          vagrant ssh -c "/home/vagrant/.st2_bash_profile.sh"
          vagrant ssh -c "env"
          vagrant ssh -c "env | grep VIRTUALENV_DIR"
          vagrant ssh -c "env | grep VIRTUALENV_ST2CLIENT_DIR"
          vagrant ssh -c "env | grep VIRTUALENV_COMPONENTS_DIR"

      - name: Verify Create Virtualenv
        run: |
          # NOTE: To speed this step in theory we could use shared folder on host and cache
          # ~/.cache/pip on guest
          # Verify we can create virtualenv
          vagrant ssh -c "cd ~/st2 ; make requirements"
          # Verify we can run tests - NOTE: This will fail for 3.8 until StackStorm/st2 PR is merged
          #vagrant ssh -c "cd st2 ; source virtualenv/bin/activate ; ./virtualenv/bin/nosetests -s -v st2api/tests/unit/controllers/v1/test_actions.py"
